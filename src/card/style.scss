.wp-block-media-text {
	display: grid;
	grid-template-rows: auto;
	align-items: center;
	grid-template-areas: "media-text-media media-text-content";
	grid-template-columns: 50% auto;

	&.has-media-on-the-right {
		grid-template-areas: "media-text-content media-text-media";
		grid-template-columns: auto 50%;
	}
}

.wp-block-media-text.is-vertically-aligned-top {
	align-items: start;
}

.wp-block-media-text.is-vertically-aligned-center {
	align-items: center;
}

.wp-block-media-text.is-vertically-aligned-bottom {
	align-items: end;
}

.wp-block-media-text .wp-block-media-text__media {
	grid-area: media-text-media;
	margin: 0;
}

.wp-block-media-text .wp-block-media-text__content {
	word-break: break-word;
	grid-area: media-text-content;
	padding: 0 8% 0 8%;
}

.wp-block-media-text > figure > img,
.wp-block-media-text > figure > video {
	max-width: unset;
	width: 100%;
	vertical-align: middle;
}

.wp-block-media-text.is-image-fill figure {
	height: 100%;
	min-height: 250px;
	background-size: cover;
}

.wp-block-media-text.is-image-fill figure > img {
	// The image is visually hidden but accessible to assistive technologies.
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	border: 0;
}

/*
* Here we here not able to use a mobile first CSS approach.
* Custom widths are set using inline styles, and on mobile,
* we need 100% width, so we use important to overwrite the inline style.
* If the style were set on mobile first, on desktop styles,
* we would have no way of setting the style again to the inline style.
*/
@media (max-width: #{ ($break-small) }) {
	.wp-block-media-text.is-stacked-on-mobile {
		grid-template-columns: 100% !important;
		grid-template-areas:
			"media-text-media"
			"media-text-content";
	}

	.wp-block-media-text.is-stacked-on-mobile.has-media-on-the-right {
		grid-template-areas:
			"media-text-content"
			"media-text-media";
	}
}
